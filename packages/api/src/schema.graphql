# import * from "./generated/prisma.graphql"

type Query {
  # Query the current user's data
  viewer: Viewer
  postById(id: ID!): Post!
  # Query a set of posts for a given data and/or multiple dates ordered chronologically.
  postsByDate(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]!
  ## Fetch global list of tags.
  tags: [Tag!]!
  file(id: ID!): File
  files: [File!]!
}

type Mutation {
  signup(name: String, email: String!, password: String!): MutationResult!
  login(email: String!, password: String!): AuthPayload!
  logout: MutationResult!
  logoutOfAllSessions: MutationResult!
  resendConfirmationEmail(email: String!): MutationResult!
  updateUserEmailStatus(emailConfirmed: Boolean!): User
  updateUser(data: UserUpdateInput): User
  getOneGist(gistId: String!): Gist
  createGist(
    files: [FileCreateInput]
    description: String
    public: Boolean
  ): Gist
  createPost(data: PostCreateInput): Post!
  updatePost(data: PostUpdateInput, where: PostWhereUniqueInput): Post!
  deletePost(id: ID!): MutationResult!
  createTag(data: TagCreateInput): Tag!
  updateTag(data: TagUpdateInput): Tag!
  deleteTag(id: ID!): MutationResult!
  createComment(data: CommentCreateInput): Comment!
  updateComment(data: CommentUpdateInput): Comment!
  deleteComment(id: ID!): MutationResult!
  renameFile(id: ID!, name: String!): File
  deleteFile(id: ID!): File
}

type Subscription {
  counter: Counter!
}

type Viewer {
  # Used to check that a given user is authenticated.
  me: User
  gists: [Gist!]!
}

type Counter {
  count: Int!
  countStr: String
}

type AuthPayload {
  token: String!
  user: User!
}

type MutationResult {
  success: Boolean
}

type Gist {
  gistId: String!
  files: [GistFile!]!
  description: String!
  isPublic: Boolean
  url: String
  forks_url: String
  commits_url: String
  git_pull_url: String
  git_push_url: String
  html_url: String
  created_at: String
  updated_at: String
  comments: Int
  user: String
  comments_url: String
  owner: String
  forks: [String]
  history: [String]
  truncated: Boolean
}

type GistFile {
  filename: String
  type: String
  language: String
  raw_url: String
  size: Int
  truncated: Boolean
  content: String
}
