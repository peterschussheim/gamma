# import * from "./generated/prisma.graphql"

type Query {
  # Query the current user's data
  viewer: Viewer
  postById(id: ID!): Post!
  # Query a set of posts for a given data and/or multiple dates ordered chronologically.
  postsByDate(
    where: PostWhereInput
    orderBy: PostOrderByInput
    skip: Int
    after: String
    before: String
    first: Int
    last: Int
  ): [Post!]!
  ## Fetch global list of tags.
  tags: [Tag!]!
  file(id: ID!): File
  files: [File!]!
}

type Mutation {
  signup(name: String, email: String!, password: String!): MutationResult!
  login(email: String!, password: String!): AuthPayload!
  logout: MutationResult!
  logoutOfAllSessions: MutationResult!
  resendConfirmationEmail(email: String!): MutationResult!
  # Initiates a pw reset
  requestPasswordReset(email: String!): User
  # Completes the actual pw reset in db
  resetPassword(input: ResetPasswordInput): User!
  updateUser(emailConfirmed: Boolean!): User
  createPost(input: PostCreateInput): Post!
  updatePost(input: PostUpdateInput): Post!
  deletePost(id: ID!): MutationResult!
  createTag(input: TagCreateInput): Tag!
  updateTag(input: TagUpdateInput): Tag!
  deleteTag(id: ID!): MutationResult!
  createComment(input: CommentCreateInput): Comment!
  updateComment(input: CommentUpdateInput): Comment!
  deleteComment(id: ID!): MutationResult!
  renameFile(id: ID!, name: String!): File
  deleteFile(id: ID!): File
}

type Subscription {
  counter: Counter!
}

type Viewer {
  # Used to check that a given user is authenticated.
  me: User
}

type Counter {
  count: Int!
  countStr: String
}

type AuthPayload {
  token: String!
  user: User!
}

type MutationResult {
  success: Boolean
}

input ResetPasswordInput {
  resetToken: String!
  password: String!
  confirmPassword: String!
}
