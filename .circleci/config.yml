version: 2
jobs:
  build-dependencies:
    docker:
      - image: circleci/node:10
    working_directory: ~/gamma
    environment:
      CI: false
    steps:
      - checkout
      - restore_cache:
          keys:
            - v5-dependency-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v5-dependency-cache-{{ .Branch }}
            - v5-dependency-cache
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          key: v5-dependency-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/gamma
            - ~/.cache
      - run:
          name: Build 'api'
          command: yarn build:api
      - run:
          name: Build 'web'
          command: CI=false yarn build:web
      - save_cache:
          key: v5-repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/gamma
            - ~/.cache
      - persist_to_workspace:
          root: ~/
          paths:
            - gamma
            - .cache/Cypress

  lint:
    docker:
      - image: circleci/node:10
    working_directory: ~/gamma
    steps:
      - restore_cache:
          key: v5-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Lint
          command: yarn lint

  test-e2e:
    docker:
      - image: cypress/base:8
        environment:
          TERM: xterm
    working_directory: ~/gamma
    steps:
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - v5-dependency-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v5-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Verify Cypress is installed
          command: yarn cy:verify
      - save_cache:
          key: v5-dependency-cache-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - run:
          name: Start e2e-tests
          # workaround for 'is-ci-cli' issue with env variable `CI=false`
          command: yarn cy:run || yarn run test:e2e
          background: false
      - store_artifacts:
          path: cypress/videos
      - store_artifacts:
          path: cypress/screenshots

  build-prod:
    docker:
      - image: circleci/node:10
    working_directory: ~/gamma
    environment:
      CI: false
    steps:
      - restore_cache:
          key: v5-repo-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Build api
          command: yarn build:api
      - run:
          name: Build web
          command: yarn build:web
      - save_cache:
          key: v5-prod-build-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ./web
            - ./api
            - ./shared

  create-docker-image:
    machine: true
    working_directory: ~/gamma
    steps:
      - checkout
      - restore_cache:
          key: v5-prod-build-cache-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - run:
          name: Parameterize ENV variables
          command: |
            echo 'export TAG=${CIRCLE_SHA1:0:7}' >> $BASH_ENV
            echo 'export API_IMAGE=api' >> $BASH_ENV 
            echo 'export WEB_IMAGE=web' >> $BASH_ENV
      - run:
          name: Docker Sign In
          command: |
            echo $DOCKER_PWD | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Create web image
          command: |
            docker build -t gammaprod/${WEB_IMAGE}:${TAG} -f "Dockerfile.web" .
      - run:
          name: Create api image
          working_directory: ~/gamma/packages/api
          command: |
            docker build -t gammaprod/${API_IMAGE}:${TAG} -f "Dockerfile.api" .
      - deploy:
          name: Push web image
          command: |
            docker push gammaprod/${WEB_IMAGE}:${TAG}
      - deploy:
          name: Push api image
          command: |
            docker push gammaprod/${API_IMAGE}:${TAG}

  generate-latest-dockerfiles:
    machine: true
    working_directory: ~/gamma
    steps:
      - checkout
      - run:
          name: Ensure required environment variables are set
          command: |
            echo 'export TAG=${CIRCLE_SHA1:0:7}' >> $BASH_ENV
            echo 'export API_IMAGE=api' >> $BASH_ENV 
            echo 'export WEB_IMAGE=web' >> $BASH_ENV
      - run:
          name: Generate 'latest' web image to be deployed to production
          command: |
            ./update.sh ${WEB_IMAGE} ${TAG}
      - run:
          name: Generate 'latest' api image to be deployed to production
          command: |
            ./update.sh ${API_IMAGE} ${TAG}

  deploy-to-now-prod:
    docker:
      - image: circleci/node:10
    working_directory: ~/gamma
    steps:
      - checkout
      - restore_cache:
          keys:
            v5-now-cli
      - run:
          name: Install now-cli
          command: |
            yarn add now
      - save_cache:
          key: v5-now-cli
          paths:
            - ~/.cache
      - run:
          name: Deploy web to now
          command: |
            now -t $NOW_TOKEN -A now.ui.json && now -t $NOW_TOKEN -A now.ui.json alias
      - run:
          name: Deploy api to now
          command: |
            cd packages/api
            now -t $NOW_TOKEN -A now.api.json && now -t $NOW_TOKEN -A now.api.json alias

workflows:
  version: 2
  build-and-test-pr:
    jobs:
      - build-dependencies
      - lint:
          requires:
            - build-dependencies
          filters:
            branches:
              ignore: master
      - test-e2e:
          requires:
            - build-dependencies
          filters:
            branches:
              ignore: master
      # - build-prod:
      #     requires:
      #       - build-dependencies
      #       - lint
      #     filters:
      #       branches:
      #         ignore: master
      # - create-docker-image:
      #     requires:
      #       - build-prod
      #     filters:
      #       branches:
      #         only: master
      # - generate-latest-dockerfiles:
      #     requires:
      #       - create-docker-image
      #     filters:
      #       branches:
      #         ignore: master
      # - hold:
      #     type: approval
      #     requires:
      #       - generate-latest-dockerfiles
      #     filters:
      #       branches:
      #         ignore: master
      # - deploy-to-now-staging:
      #     requires:
      #       - hold
      #     filters:
      #       branches:
      #         ignore: master
  build-and-test-master:
    jobs:
      - build-dependencies:
          filters:
            branches:
              only: master
      - lint:
          requires:
            - build-dependencies
          filters:
            branches:
              only: master
      - test-e2e:
          requires:
            - build-dependencies
            - lint
          filters:
            branches:
              only: master
      - build-prod:
          requires:
            - test-e2e
          filters:
            branches:
              only: master
      - create-docker-image:
          requires:
            - build-prod
          filters:
            branches:
              only: master
      - generate-latest-dockerfiles:
          requires:
            - create-docker-image
          filters:
            branches:
              only: master
      - hold:
          type: approval
          requires:
            - generate-latest-dockerfiles
          filters:
            branches:
              only: master
      - deploy-to-now-prod:
          requires:
            - hold
          filters:
            branches:
              only: master
